//librerias
#include <ThingSpeak.h>
#include <WiFi.h>
#include <WiFiClient.h>
#include <WiFiServer.h>
#include <WiFiClientSecure.h>
#include <Wire.h>



//sensor interno ESP32
#ifdef __cplusplus
extern "C" {
#endif
  uint8_t temprature_sens_read();

#ifdef __cplusplus
}
#endif


const int sensor = 16;    //Lectura del pulsador

const int led = 12;  //señal del sensor
bool estado = false;  
  

// Usuarios y claves para la conexión WiFi para dos localizaciones, en mi caso de pruebas.
char ssid[] = "Livebox6-767D-24G"; //SSID - Red WiFi a la que me conecto
char pass[] = "*******"; // Passowrd de la red WiFi

int status = WL_IDLE_STATUS;
WiFiClient client;



long RSSI;
float temp_cpu = ((temprature_sens_read() - 32) / 1.8);

int periodo = 1800 ; //mas o menos media hora en segundos, entre delays etc será más de media hora
int cont = 0; //creamos contador
int n=0; //para resetear cont

/* Variables para definir la conexión con ThingSpeak
unsigned long myChannelNumber = ******; //Código de canal de Things Speak
const char * myWriteAPIKey = "*********"; // Indicar aquí el código de escritura de ThingSpeak
*/

// Set web server port number
WiFiServer server(80); //choose port 2026 for control "Anywhere"

// Variable to store the HTTP request
String header;

// Auxiliar variables to store the current output state
String outputState = "off";


// Current time
unsigned long currentTime = millis();
// Previous time
unsigned long previousTime = 0; 
// Define timeout time in milliseconds (example: 2000ms = 2s)
const long timeoutTime = 2000;

void setup() {
  Serial.begin(115200);
    // Connect to Wi-Fi network with SSID and password
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  // Print local IP address and start web server
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  server.begin();


//ThingSpeak.begin(client); // Inicia ThingSpeak


    pinMode(led,OUTPUT);
   pinMode(sensor, INPUT_PULLUP);


  // Set outputs to LOW


 //digitalWrite(pul,LOW);
  digitalWrite(led,LOW);


}


void loop(){
  delay (1000);

  bool valor = digitalRead(sensor);
  if (valor ==LOW){
    estado=!estado;
    digitalWrite(led,estado);
    delay (2000);
  }
 /* PARA EL PULSADOR 1 
  pulso_temporal = digitalRead(pul);    // leemos el valor del estado del pulsador correspondiente
  if (pulso_temporal == HIGH) {
    valor_temporal_1 = !valor_temporal_1 ;         // le asignamos el valor contrario del que tenia antes el pulsador 1
    delay(200);
  }
  if (valor_temporal_1 == HIGH) {
    digitalWrite(rele, HIGH);          // si antes estaba apagado ahora la pasamos a activar el rele 1
  }
  else {
    digitalWrite(rele, LOW);           // si antes estaba encendida ahora la pasamos a apagar el rele 1
  }
 */
  //cpu();
 /*comprobamos contador y reseteamos si es necesario
  if ((periodo == 1800)&(cont == 1800)){
  n=cont;
  if(n>=1800)(cont=0);
  //update();
  
  }else{
    cont++;
//Serial.println(cont);
    }
*/
  //Sensor
   //val = map(analogRead(humsuelo), 4092, 0, 0, 100);
  
  //Serial.println(analogRead(humsuelo));
   // Serial.println(val);
   // Serial.print("%");
  //delay(3000);

  //Para activarlo manualmente
  WiFiClient client = server.available();   // Listen for incoming clients

  if (client) {                             // If a new client connects,
    currentTime = millis();
    previousTime = currentTime;
    Serial.println("New Client.");          // print a message out in the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected() && currentTime - previousTime <= timeoutTime) {  // loop while the client's connected
      currentTime = millis();
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();
            
            // turns the GPIOs on and off
            if (header.indexOf("GET /out/on") >= 0) {
              Serial.println("GPIO on");
              outputState = "on";
              digitalWrite(led, HIGH);
            } else if (header.indexOf("GET /out/off") >= 0) {
              Serial.println("GPIO off");
              outputState = "off";
              digitalWrite(led, LOW);
            } /*else if (header.indexOf("GET /27/on") >= 0) {
              Serial.println("GPIO 27 on");
              output27State = "on";
              digitalWrite(output27, HIGH);
            } else if (header.indexOf("GET /27/off") >= 0) {
              Serial.println("GPIO 27 off");
              output27State = "off";
              digitalWrite(output27, LOW);
            }
            */
            // Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            // CSS to style the on/off buttons 
            // Feel free to change the background-color and font-size attributes to fit your preferences
            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button2 {background-color: #555555;}</style></head>");
            
            // Web Page Heading
            client.println("<body><h1>ESP32 Web Server</h1>");
            
            // Display current state, and ON/OFF buttons for GPIO 26  
            client.println("<p>GPIO out - State " + outputState + "</p>");
            // If the output26State is off, it displays the ON button       
            if (outputState=="off") {
              client.println("<p><a href=\"/out/on\"><button class=\"button\">ON</button></a></p>");
            } else {
              client.println("<p><a href=\"/out/off\"><button class=\"button button2\">OFF</button></a></p>");
            } 
               
            /* Display current state, and ON/OFF buttons for GPIO 27  
            client.println("<p>GPIO 27 - State " + output27State + "</p>");
            
            // If the output27State is off, it displays the ON button       
            if (output27State=="off") {
              client.println("<p><a href=\"/27/on\"><button class=\"button\">ON</button></a></p>");
            } else {
              client.println("<p><a href=\"/27/off\"><button class=\"button button2\">OFF</button></a></p>");
            }
            client.println("</body></html>");
            */
            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}

//Funciones

/*Funcion de subida de datos al ThingSpeak
void update(){

delay(200);
//Leemos datos del sensor


//conectamos con ThingSpeak
int mensaje = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
ThingSpeak.setField(1, temp); 
ThingSpeak.setField(2, hum); 
//Serial.println("Enviamos las variables a la nube...");
delay(5000); //damos mas tiempo al servidor para que nops responda

//Si Thingspeak responde con el n 200, es que los datos han subido correctamente.
if (mensaje == 200){
  Serial.println("Subidas las variables, correctamente!!!");
   delay(100);
  }else{
    update(); //Si ha fallado, reintentamos el update()
    }
}
*/
/*Temp CPU
void cpu(){
  Serial.print("Temp CPU: ");
  // Convert raw temperature in F to Celsius degrees
  Serial.println((temprature_sens_read() - 32) / 1.8);

  delay (1000);
   
    

}

*/
//valores conexion wifi
void valor_wifi() {
 
    Serial.print("RSSI: ");
    Serial.print(WiFi.RSSI());
    Serial.println(" dBm");
    RSSI = ((WiFi.RSSI())* (-1)); 
    delay (2000);
      
}
