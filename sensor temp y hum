
#include <ThingSpeak.h>
#include <WiFi.h>
#include <WiFiClient.h>
#include <WiFiServer.h>
#include <WiFiClientSecure.h>
#include <Wire.h>
#include <DFRobot_SHT3x.h>

// Usuarios y claves para la conexión WiFi para dos localizaciones, en mi caso de pruebas.
//char ssid[] = "MiFibra-AAC7"; //SSID - Red WiFi a la que me conecto
//char pass[] = "*****"; // Passowrd de la red WiFi
char ssid[] = "Livebox6-767D"; //SSID - Red WiFi a la que me conecto
char pass[] = "*******"; // Passowrd de la red WiFi


int status = WL_IDLE_STATUS;
WiFiClient client;

//Declaración de variables

float temp;
float hum ;
int inicio = 1;
int periodo = 1800 ; //mas o menos media hora en segundos, entre delays etc será más de media hora
int cont = 0; //creamos contador
int n=0; //para resetear cont



// Variables para definir la conexión con ThingSpeak
unsigned long myChannelNumber = ******; //Código de canal de Things Speak
const char * myWriteAPIKey = "*********"; // Indicar aquí el código de escritura de ThingSpeak


//definimos el sensor que estamos utilzando, en mi caso es este:
//DFRobot_SHT3x sht3x(&Wire,/*address=*/0x45,/*RST=*/4);
DFRobot_SHT3x   sht3x;


void setup() {

Serial.begin(115200);
DFRobot_SHT3x::sRHAndTemp_t data = sht3x.readTemperatureAndHumidity(sht3x.eRepeatability_High);

//Imprimir mensaje de conexión a la red Wifi
WiFi.begin(ssid, pass); //Se inicia la conexión al Wifi
ThingSpeak.begin(client); // Inicia ThingSpeak
WiFi.mode(WIFI_STA);
    Serial.println("Conectando...");
 delay (5000);

//Minetras se conecta imprimirá ...
while(WiFi.status() != WL_CONNECTED){
  delay(5000);
  
//Ya que se estableció la conexión al Wifi se imprime conexión establecida

    Serial.println("Conectado");
    delay (2000);
    Serial.print("IP: ");
     Serial.println(WiFi.localIP());  
 delay (2000);
} 

  //Initialize the chip
  while (sht3x.begin() != 0) {
    Serial.println("Failed to Initialize the chip, please confirm the wire connection");
    delay(1000);
  }
  /**
   * readSerialNumber Read the serial number of the chip.
   * @return Return 32-digit serial number.
   */
  Serial.print("Chip serial number: ");
  Serial.println(sht3x.readSerialNumber());

  /**
   * softReset Send command resets via IIC, enter the chip's default mode single-measure mode, 
   * turn off the heater, and clear the alert of the ALERT pin.
   * @return Read the register status to determine whether the command was executed successfully, 
   * and return true indicates success.
   */
   if(!sht3x.softReset()){
     Serial.println("Failed to Initialize the chip....");
   }

  /**
   * heaterEnable(): Turn on the heater inside the chip to enable the sensor get correct humidity value in wet environments.
   * @return Read the status of the register to determine whether the command was executed successfully,
   * and return true indicates success.
   * @note Heaters should be used in wet environments, and other cases of use will result in incorrect readings
   */

  //if(!sht3x.heaterEnable()){
  // Serial.println("Failed to turn on the heater....");
  //}
  Serial.println("------------------Read adta in single measurement mode-----------------------");
  
  if(inicio == 1){

    Serial.println("Sistema listo");
    delay (500);
    inicio = 0;
    update(); //al iniciarse el programa, nos aseguramos el 1er update
}
}


void loop() {
  delay (1000);
 //comprobamos contador y reseteamos si es necesario
  if ((periodo == 1800)&(cont == 1800)){
  n=cont;
  if(n>=1800)(cont=0);
  update();
  
  }else{
    cont++;
//Serial.println(cont);
    }
}
//Funcion de subida de datos al ThingSpeak
void update(){

delay(200);
//Leemos datos del sensor
float temp =  (sht3x.getTemperatureC());
float hum = (sht3x.getHumidityRH());

//conectamos con ThingSpeak
int mensaje = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
ThingSpeak.setField(1, temp); 
ThingSpeak.setField(2, hum); 
//Serial.println("Enviamos las variables a la nube...");
delay(5000); //damos mas tiempo al servidor para que nops responda

//Si Thingspeak responde con el n 200, es que los datos han subido correctamente.
if (mensaje == 200){
  Serial.println("Subidas las variables, correctamente!!!");
   delay(100);
  }else{
    update(); //Si ha fallado, reintentamos el update()
    }
}
